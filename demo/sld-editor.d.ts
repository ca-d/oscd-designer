import { nothing, LitElement, TemplateResult } from 'lit';
import { Ref } from 'lit/directives/ref.js';
import type { Dialog } from '@material/mwc-dialog';
import type { Snackbar } from '@material/mwc-snackbar';
import type { TextField } from '@material/mwc-textfield';
import '@material/mwc-dialog';
import '@material/mwc-list';
import '@material/mwc-list/mwc-list-item.js';
import '@material/mwc-snackbar';
import '@material/mwc-textfield';
import { Point } from './util.js';
import { EditV2, Transactor } from '@omicronenergy/oscd-api';
type MenuItem = {
    handler?: () => void;
    content: TemplateResult;
};
export declare class SLDEditor extends LitElement {
    editor: Transactor<EditV2>;
    doc: XMLDocument;
    substation: Element;
    editCount: number;
    gridSize: number;
    nsp: string;
    resizingBR?: Element;
    resizingTL?: Element;
    placing?: Element;
    placingOffset: Point;
    placingLabel?: Element;
    connecting?: {
        from: Element;
        path: Point[];
        fromTerminal: 'T1' | 'T2' | 'N1' | 'N2';
    };
    showLabels?: boolean;
    get idle(): boolean;
    resizeSubstationUI: Dialog;
    substationWidthUI: TextField;
    substationHeightUI: TextField;
    sld: SVGGraphicsElement;
    groundHint: Snackbar;
    mouseX: number;
    mouseY: number;
    mouseX2: number;
    mouseY2: number;
    mouseX2f: number;
    mouseY2f: number;
    menu?: {
        element: Element;
        top: number;
        left: number;
    };
    coordinatesRef: Ref<HTMLElement>;
    positionCoordinates(e: MouseEvent): void;
    openMenu(element: Element, e: MouseEvent): void;
    svgCoordinates(clientX: number, clientY: number): Point;
    canPlaceAt(element: Element, x: number, y: number, w: number, h: number): boolean;
    canResizeTo(element: Element, w: number, h: number): boolean;
    canResizeToTL(element: Element, x: number, y: number, w: number, h: number): boolean;
    renderedLabelPosition(element: Element): Point;
    renderedPosition(element: Element): Point;
    handleKeydown: ({ key }: KeyboardEvent) => void;
    handleClick: (e: MouseEvent) => void;
    connectedCallback(): void;
    disconnectedCallback(): void;
    saveSVG(): void;
    nearestOpenTerminal(equipment?: Element): 'T1' | 'T2' | undefined;
    groundTerminal(equipment: Element, name: 'T1' | 'T2' | 'N1' | 'N2'): void;
    flipElement(element: Element): void;
    addTextTo(element: Element): void;
    transformerWindingMenuItems(winding: Element): MenuItem[];
    transformerMenuItems(transformer: Element): MenuItem[];
    equipmentMenuItems(equipment: Element): MenuItem[];
    busBarMenuItems(busBar: Element): MenuItem[];
    containerMenuItems(bayOrVL: Element): MenuItem[];
    textMenuItems(text: Element): MenuItem[];
    renderMenu(): TemplateResult<1>;
    render(): TemplateResult<1>;
    renderLabel(element: Element): TemplateResult<2> | typeof nothing;
    renderContainer(bayOrVL: Element, preview?: boolean): TemplateResult<2>;
    windingMeasures(winding: Element): {
        center: Point;
        size: number;
        terminals: Partial<Record<'T1' | 'T2' | 'N1' | 'N2', Point>>;
        grounded: Partial<Record<'N1' | 'N2', [Point, Point]>>;
        arc?: {
            from: Point;
            fromCtl: Point;
            to: Point;
            toCtl: Point;
        };
        zigZagTransform?: string;
    };
    renderTransformerWinding(winding: Element): TemplateResult<2>;
    renderPowerTransformer(transformer: Element, preview?: boolean): TemplateResult<2>;
    renderEquipment(equipment: Element, { preview, connect }?: {
        preview?: boolean | undefined;
        connect?: boolean | undefined;
    }): TemplateResult<2>;
    renderBusBar(busBar: Element): TemplateResult<2>;
    renderConnectivityNode(cNode: Element): TemplateResult<2> | typeof nothing;
    static styles: import("lit").CSSResult;
}
export {};
